<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Plugin Writing - Coppermine Photo Gallery - Documentation &amp; Manual</title>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<meta name="language"    content="en">
<meta name="copyright"   content="Coppermine dev team">
<meta name="description" content="list of plugin hooks">
<meta http-equiv="Content-Style-Type" content="text/css">
<meta name="MSSmartTagsPreventParsing" content="true">
<meta http-equiv="imagetoolbar" content="no">
<!--
  SVN version info:
  -----------------
  Coppermine version: 1.5.0
  $Revision: 3473 $
  $LastChangedBy: gaugau $
  $Date: 2007-03-01 19:33:52 +0100 (Do, 01 Mrz 2007) $
-->
<link rel="stylesheet" type="text/css" href="style.css" media="all" />
<link rel="stylesheet" type="text/css" href="screen.css" media="screen" />
<link rel="stylesheet" type="text/css" href="print.css" media="print" />
<link rel="shortcut icon" href="favicon.ico" />
<script src="script.js" type="text/javascript"></script>
</head>
<body>
<script type="text/javascript">
  cpgDocHeader();
</script>
<div id="toc">
<script type="text/javascript">
  cpgDocToc();
</script>
<noscript>
<a href="toc.htm">Table of Contents</a>
</noscript>
</div>


<a name="plugin_writing"></a><h1>Plugin Writing<a href="#plugin_writing" title="Link to this section"><img src="pics/anchor.gif" width="15" height="9" border="0" alt="" /></a></h1>
<p>Coppermine comes with a plugin architecture that allows skilled users to come up with plugins that can be installed by the end user with just some clicks in the plugin manager section. Main benefit of plugins is that end users don't have to hack core code files. As a result, plugins don't need to be applied when upgrading between minor versions of coppermine (when replacing all core files due to maintenance releases).</p>
<p>Many things that could be done using core hacks can be accomplished using plugins as well. The only disadvantage of plugins is the fact that the plugin author needs to become a bit more familiar with coppermine's plugin API.</p>
<p>This short guide is suppossed to help possible plugin authors to get familiar with the plugin system. You have to understand though that this section will not teach you how to edit PHP - this would be beyond the scope of this documentation. We asume that you're familar both with HTML as well as PHP to some extent. This section of the docs will definitely <strong>not</strong> teach you how to code in the first place, nor is it a beginner's tutorial for programming. If you have never written one line of PHP code you should get familiar with PHP first and apply some hacks before actually considering to come up with a plugin of your own.</p>

<a name="plugin_writing_preparation"></a><h2>Preparations<a href="#plugin_writing_preparation" title="Link to this section"><img src="pics/anchor.gif" width="15" height="9" border="0" alt="" /></a></h2>
<p>Before starting to hack away, you should make some preparations and maybe sketch the layout of your plugin.</p>
<ul>
  <li><strong>Choose a name</strong><br />
  Your plugin needs a meaningfull, simple name. Make sure that a plugin doesn't already exist with the same name you've chosen. Then create a sub-folder within the plugin folder and name it as you see fit. Make sure to use web-safe names (only alphanumerals, all lower-case, no special chars except dash and underscore.<br />
  For clarification: there can be only alphanumerals in a plugin's folder name. There mustn't be any dots or other special chars in it. The only exception is the hypen (-) and underscore (_)
  Example: <tt class="code">your_coppermine_folder/plugins/coffee_maker/</tt></li>
  <li><strong>Consider translations</strong><br />
  Coppermine is an international project, with users from all over the world. If you should decide to contribute your custom plugin later, it would be a good idea to design it properly in the first place: keep all strings that could need translation in a separate include file and only hard-code the corresponding vars into your code.
  </li>
  <li><strong>Consider a config screen</strong><br />
  If your plugin is only going to add one single feature to coppermine without anything to configure, then there's no need to provide a separate config screen for your plugin. However, if your plugin has options the end user could configure, it's a good idea to come up with a config screen for your plugin.
  </li>
  <li><strong>Database changes</strong><br />
  If your plugin needs to write to the database or even changes the structure of tables, it's almost mandatory to come up with a routine to write the needed database changes during install of the plugin. It's a good idea as well to come up with a method to undo the database changes if the user should later decide to disable/uninstall your plugin. If this is the case, you should preferably come up with a database setup screen as well.
  </li>
  <li><strong>Support issues</strong><br />
  For every non-trivial plugin that gets published on the coppermine home page, there will be an announcement thread on the board. It's a good idea to provide the URL of the announcement thread together with your plugin, preferably even a clickable link.
  </li>
  <li><strong>Plugin versions</strong><br />
  Although you may not plan to develop your plugin even further, others may do so. Therefor, it's a good idea to provide a version number with your plugin.
  </li>
</ul>

<a name="plugin_writing_core_files"></a><h2>Core files<a href="#plugin_writing_core_files" title="Link to this section"><img src="pics/anchor.gif" width="15" height="9" border="0" alt="" /></a></h2>
<p>Every plugin contains at least two mandatory files: codebase.php and configuration.php:</p>
<ul>
  <li><strong>codebase.php</strong><br />
  In this file, the various actions that a plugin can execute are being defined. Think of it as the plugin's core file, where the core logic of the plugin resides in.
  </li>
  <li><strong>configuration.php</strong><br />
  When the plugin manager is run, it scans through all sub-folders of the plugins folder and looks for a file named <tt class="code">configuration.php</tt>. If such a file exists, the information provided within this file will be displayed as a record in the list of not-installed or installed plugins.<br />
  &nbsp;<br />
  You can use these vars inside configuration.php:
  <ul>
    <li><strong>$name</strong><br />
    The full name of your plugin (not only the web-safe folder name chosen initially, but a name that indicates what the plugin does).<br />
    Example: <span class="quote">$name = 'Coffee Maker';</span>
    </li>
    <li><strong>$description</strong><br />
    A short description that explains what your plugin actually does.<br />
    Example: <span class="quote">$description = 'Turns your Coppermine gallery into a coffee machine.';</span>
    </li>
    <li><strong>$author</strong><br />
    Obviously, this is the place for your credits. You can use your real name or a nickname (or even both). You can even slightly promote your site by adding a link to it within the content of this variable.<br />
    Example: <span class="quote">$author = 'John Smith (aka &quot;&lt;a href="http://yoursite.tld/" rel="external" class="external"&gt;NeoIsDead&lt;/a&gt;&quot;).';</span>
    </li>
    <li><strong>$version</strong><br />
    The version of your plugin - usually starting with 1.0 (although you're welcome to come up with any other numbering scheme as long as the difference between versions will be obvious).<br />
    Example: <span class="quote">$version = '1.0';</span>
    </li>
    <li><strong>$extra_info</strong><br />
    Is displayed with the title of a plugin that is <strong>not</strong> installed and can be used to present extra information. Use it for example to present an additional link to the plugin documentation if your plugin needs detailed explanation. When using larger pieces of HTML, it's recommended to use the heredoc-syntax to define the variable to make the code better readable.<br />
    Example:<div class="quote">$extra_info = &lt;&lt;&lt;EOT<br />
    &lt;table border="0" cellspacing="0" cellpadding="0"&gt;<br />
    &lt;tr&gt;<br />
        &lt;td class="admin_menu"&gt;<br />
        &lt;a href="http://yoursite.tld/coffee_maker/docs/" title="Plugin Documentation" rel="external" class="external"&gt;Documentation&lt;/a&gt;<br />
        &lt;/td&gt;<br />
    &lt;/tr&gt;<br />
    &lt;/table&gt;<br />
EOT;</div>
    </li>
    <li><strong>$install_info</strong><br />
    Is displayed with the title of a plugin that <strong>is</strong> installed and can be used to present extra information. When using larger pieces of HTML, it's recommended to use the heredoc-syntax to define the variable to make the code better readable.<br />
    Example:<div class="quote">$install_info = &lt;&lt;&lt;EOT<br />
&lt;div class=&quot;admin_menu_wrapper&quot;&gt;<br />
    &lt;div class=&quot;admin_menu admin_float&quot;&gt;<br />
        &lt;a href=&quot;index.php?file=coffee_maker/admin&action=config&quot; title=&quot;Configuration&quot;&gt;Plugin configuration&lt;/a&gt;<br />
    &lt;/div&gt;<br />
    &lt;div class=&quot;admin_menu admin_float&quot;&gt;<br />
        &lt;a href=&quot;http://coppermine-gallery.net/forum/index.php?foo=bar&quot; title=&quot;Plugin Support&quot;&gt;Support thread&lt;/a&gt;<br />
    &lt;/div&gt;<br />
    &lt;div style=&quot;clear:left;&quot;&gt;&lt;/div&gt;<br />
&lt;/div&gt;<br />
EOT;</div>
    </li>
  </ul>
  </li>
  <li><strong>readme.txt</strong><br />
  It's a good idea (not mandatory though) to provide a plain-text file within your plugin's folder as well (readme.txt or similar) that contains copyright and support information and basic instructions what your plugin does and how the end user can install it.</li>
</ul>

<a name="plugin_writing_types"></a><h2>Plugin Types<a href="#plugin_writing" title="Link to this section"><img src="pics/anchor.gif" width="15" height="9" border="0" alt="" /></a></h2>
Plugins (or rather individual pages of a plugin) can roughly fall into two categories: they can reside on a page of their own (a good example would be the plugin config screen some plugins come with or a plugin that adds a contact form) or they can reside within each or some coppermine-driven pages, modifying the output or functionality of the pages they reside on (a good example would be plugins that add menu items).<br />
It is comparatively easy to come up with plugins that fall into the first category (creating additional pages). The second option is the more advanced and powerfull option that plugins authors can use. For this purpose, there are &quot;anchors&quot; all over coppermine's core code that allow plugin interaction with the code, the so-called &quot;<a href="plugin_hooks.htm">plugin hooks</a>&quot;.

<a name="plugin_writing_includes"></a><h2>Using includes<a href="#plugin_writing_includes" title="Link to this section"><img src="pics/anchor.gif" width="15" height="9" border="0" alt="" /></a></h2>
<p>Files the plugin is meant to include can only contain one single dot that separates the actual filename from the php-extension!</p>

<script type="text/javascript">
  cpgDocFooter();
  dateRevision(' $LastChangedDate$ ', ' $Revision$ ');
</script>

</body>
</html>