/*
 Copyright (C) 2007  Frank Cleynen
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package be.khleuven.frank.JCpg.Sync;

import java.io.File;
import java.io.IOException;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

import be.khleuven.frank.JCpg.Communicator.JCpgPhpCommunicator;
import be.khleuven.frank.JCpg.Components.JCpgAlbum;
import be.khleuven.frank.JCpg.Components.JCpgCategory;
import be.khleuven.frank.JCpg.Components.JCpgPicture;
import be.khleuven.frank.JCpg.Save.JCpgGallerySaver;
import be.khleuven.frank.JCpg.UI.JCpgUI;

/**
 * Used for syncing the whole gallery. We sync from top to bottom: cats ->
 * albums -> pictures This is important when executing INSERT queries. This
 * means we want to make new entries in the database which don't yet have a
 * correct id, which is autogenerated by the database. So first we insert a new
 * category, we then fetch the generated id and pass it through to the
 * underlying albums and so on.
 * 
 * @author Frank Cleynen
 */
public class JCpgSyncer {
	
	
	
	

													// *************************************
													// 				VARIABLES 			   *
													// *************************************
	private JCpgUI ui;

	
	
	
	

	
	
	
													// *************************************
													// 				CONSTRUCTOR 		   *
													// *************************************
	/**
	 * 
	 * Makes a new JCpgSyncer object
	 * 
	 * @param ui
	 *            reference to the ui
	 * @param sqlManager
	 *            reference to a sql manager
	 */
	public JCpgSyncer(JCpgUI ui) {

		setUi(ui);

	}
	
	
	
	
	
	
	
	

													// *************************************
													// 				SETTERS 			   *
													// *************************************
	/**
	 * 
	 * Set the syncer ui
	 * 
	 * @param ui
	 *            the syncer ui reference
	 */
	private void setUi(JCpgUI ui) {

		this.ui = ui;

	}

	
	
	
	
	
	
	
	
												
													// *************************************
													// 				GETTERS				   *
													// *************************************
	/**
	 * 
	 * Get the syncer Ui reference
	 * 
	 * @return the Ui reference
	 */
	public JCpgUI getUi() {

		return this.ui;

	}


	
	
	
	
	
	
	

													// *************************************
													// 				MUTATORS & OTHERS 	   *
													// *************************************
	/**
	 * 
	 * Perform all the right sync operations
	 * 
	 */
	public void sync() {
		
		// Categories
		JCpgPhpCommunicator phpCommunicator = new JCpgPhpCommunicator(getUi().getCpgConfig().getSiteConfig().getBaseUrl()); // make a phpCommunicator object to talk with the API
		
		//String parameters = "showmycategories&username=" + getUi().getCpgConfig().getUserConfig().getUsername() + "&sessionkey=" + getUi().getCpgConfig().getUserConfig().getSessionkey();
		String parameters = "showcategories&sessionkey=" + getUi().getCpgConfig().getUserConfig().getSessionkey();
		
		if(phpCommunicator.performPhpRequest(parameters)){ // result ok
			
			String catname = phpCommunicator.getXmlTagText("categorydata", "name");
			
			if(getUi().visitAllNodes((DefaultMutableTreeNode)getUi().getTree().getModel().getRoot(), "category", catname) == null){
				
				SAXBuilder builder = new SAXBuilder(false); // no validation for illegal xml format
				
				File file = new File("svr.xml");
				
				try {
					
					Document doc = builder.build("svr.xml");
					
					Element root = doc.getRootElement();
					
					ArrayList<JCpgCategory> categories = phpCommunicator.getCategories(root);
					
					System.out.println(categories.size());
					
				} catch (JDOMException e) {
					
					
					
				}
				
				;
				
				
			}
			
		}

		//new JCpgGallerySaver(ui.getGallery()).saveGallery(); // save gallery

	}

}
